[{"content":"Nagiha · Re:prosperitás Constants are promises by the compiler. Constants # C++ has two notions of immutability:\nconst constexpr const Keyword # The compiler enforces the promise of immutability with the const keyword. This is used primarily to specify interface, that arguments passed to a function will NOT be modified. const variable may be evaluated in run-time.\nconstexpr Keyword # The compiler allows compile-time evaluated constants named constexpr. It instructs the compiler to write data into read-only memory. Philosophically, a variable is constexpr if and only if the compiler can always replace it with an exact value that can be computed in compile time.\nFor a function to appear in the definition of a constexpr variable, the function must be constexpr. The function must be simple enough for it to be evaluated in compile-time e.g. return a value.\nExamples # #include \u0026lt;vector\u0026gt; using namespace std; constexpr double square(double x) { // constexpr function return x*x; } const int dmv = 17; // const variable int var = 12; // var is NOT a const variable constexpr double max1 = 1.4*square(dmv); // constexpr as square is constexpr and dmv is const // constexpr double max2 = 1.4*square(var); // error as var is NOT a const double sum(const vector\u0026lt;double\u0026gt; \u0026amp;v); // declares sum will not modify v vector\u0026lt;double\u0026gt; v = {1, 2, 3, 4}; const double s1 = sum(v); // evaluated at run-tiime constexpr double s2 = sum(v); // error: v is NOT a const ","date":"2022/10/26","permalink":"/posts/computer_science/c++/constants/","section":"Posts","summary":"Nagiha · Re:prosperitás Constants are promises by the compiler. Constants # C++ has two notions of immutability:\nconst constexpr const Keyword # The compiler enforces the promise of immutability with the const keyword.","title":"Constants"},{"content":"WHITEFISTS · 【G2R2018】VECTOЯ A declaration introduces a name into a scope. Scope # The scope defines where a variable can be accessed.\nLocal Scope # A name declared in a function or lambda function has a local scope (block scope). The scope extends from its point of declaration to the end of the block.\n#include \u0026lt;vector\u0026gt; using namespace std; int main() { vector\u0026lt;int\u0026gt; vi; // vi has local scope to main() } Class Scope # A class member name is defined in a class, or outside any function, lambda function or enum class. The scope extends to the class.\n#include \u0026lt;string\u0026gt; struct Record { string name; // name has class scope to Record } Namespace Scope # A namespace member name is defined in a namespace outside any function, lambda function or enum class. The scoep also extends to the namespace.\nA global name is outside any construction and is said to be in the global namespace.\nvoid g(); // g() is in the global namespace namespace A { namespace B { void f(); // A::B::f() has namespace scope to A::B } void B::f() {} // definition of A::B::f() } Lifetime # Initialize the object before using it! An local scope name lives until and is destroyed at the end of its scope. A class member name lives until the point of destruction of the object of which the name is a member. A namespace member name lives until the end of the program. A dynamic object lives until it is delete.\nRemember to delete dynamic objects or memory leak! #include \u0026lt;vector\u0026gt; auto vi = new vector\u0026lt;int\u0026gt;{1, 2, 3}; int main() { delete vi; // vi is destroyed return 0; } ","date":"2022/10/26","permalink":"/posts/computer_science/c++/scope_lifetime/","section":"Posts","summary":"WHITEFISTS · 【G2R2018】VECTOЯ A declaration introduces a name into a scope. Scope # The scope defines where a variable can be accessed.\nLocal Scope # A name declared in a function or lambda function has a local scope (block scope).","title":"Scope and Lifetime of Variables"},{"content":"","date":"2022/10/26","permalink":"/posts/computer_science/","section":"Posts","summary":"","title":"Computer Science"},{"content":"","date":"2022/10/26","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"2022/10/26","permalink":"/posts/computer_science/c++/","section":"Posts","summary":"","title":"C++"},{"content":"• _ • · Don’t Fight The Music ","date":"2022/10/26","permalink":"/","section":"","summary":"• _ • · Don’t Fight The Music ","title":""},{"content":"Original from mxstbr/markdown-test-file Markdown: Syntax # Overview Philosophy Inline HTML Automatic Escaping for Special Characters Block Elements Paragraphs and Line Breaks Headers Blockquotes Lists Code Blocks Horizontal Rules Span Elements Links Emphasis Code Images Miscellaneous Backslash Escapes Automatic Links Note: This document is itself written using Markdown; you can see the source for it by adding \u0026lsquo;.text\u0026rsquo; to the URL .\nOverview # Philosophy # Markdown is intended to be as easy-to-read and easy-to-write as is feasible.\nReadability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it\u0026rsquo;s been marked up with tags or formatting instructions. While Markdown\u0026rsquo;s syntax has been influenced by several existing text-to-HTML filters \u0026ndash; including Setext , atx , Textile , reStructuredText , Grutatext , and EtText \u0026ndash; the single biggest source of inspiration for Markdown\u0026rsquo;s syntax is the format of plain text email.\nBlock Elements # Paragraphs and Line Breaks # A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line \u0026ndash; a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.\nThe implication of the \u0026ldquo;one or more consecutive lines of text\u0026rdquo; rule is that Markdown supports \u0026ldquo;hard-wrapped\u0026rdquo; text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type\u0026rsquo;s \u0026ldquo;Convert Line Breaks\u0026rdquo; option) which translate every line break character in a paragraph into a \u0026lt;br /\u0026gt; tag.\nWhen you do want to insert a \u0026lt;br /\u0026gt; break tag using Markdown, you end a line with two or more spaces, then type return.\nHeaders # Markdown supports two styles of headers, [Setext] [1] and [atx] [2].\nOptionally, you may \u0026ldquo;close\u0026rdquo; atx-style headers. This is purely cosmetic \u0026ndash; you can use this if you think it looks better. The closing hashes don\u0026rsquo;t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.)\nBlockquotes # Markdown uses email-style \u0026gt; characters for blockquoting. If you\u0026rsquo;re familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a \u0026gt; before every line:\nThis is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\nDonec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\nMarkdown allows you to be lazy and only put the \u0026gt; before the first line of a hard-wrapped paragraph:\nThis is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\nDonec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of \u0026gt;:\nThis is the first level of quoting.\nThis is nested blockquote.\nBack to the first level.\nBlockquotes can contain other Markdown elements, including headers, lists, and code blocks:\nThis is a header. # This is the first list item. This is the second list item. Here\u0026rsquo;s some example code:\nreturn shell_exec(\u0026quot;echo $input | $markdown_script\u0026quot;); Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.\nLists # Markdown supports ordered (numbered) and unordered (bulleted) lists.\nUnordered lists use asterisks, pluses, and hyphens \u0026ndash; interchangably \u0026ndash; as list markers:\nRed Green Blue is equivalent to:\nRed Green Blue and:\nRed Green Blue Ordered lists use numbers followed by periods:\nBird McHale Parish It\u0026rsquo;s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:\nIf you instead wrote the list in Markdown like this:\nBird McHale Parish or even:\nBird McHale Parish you\u0026rsquo;d get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don\u0026rsquo;t have to.\nTo make lists look nice, you can wrap items with hanging indents:\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. But if you want to be lazy, you don\u0026rsquo;t have to:\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:\nThis is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing.\nIt looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:\nThis is a list item with two paragraphs.\nThis is the second paragraph in the list item. You\u0026rsquo;re only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAnother item in the same list.\nTo put a blockquote within a list item, the blockquote\u0026rsquo;s \u0026gt; delimiters need to be indented:\nA list item with a blockquote:\nThis is a blockquote inside a list item.\nTo put a code block within a list item, the code block needs to be indented twice \u0026ndash; 8 spaces or two tabs:\nA list item with a code block:\n\u0026lt;code goes here\u0026gt; Code Blocks # Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both \u0026lt;pre\u0026gt; and \u0026lt;code\u0026gt; tags.\nTo produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.\nThis is a normal paragraph:\nThis is a code block. Here is an example of AppleScript:\ntell application \u0026quot;Foo\u0026quot; beep end tell A code block continues until it reaches a line that is not indented (or the end of the article).\nWithin a code block, ampersands (\u0026amp;) and angle brackets (\u0026lt; and \u0026gt;) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown \u0026ndash; just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:\n\u0026lt;div class=\u0026quot;footer\u0026quot;\u0026gt; \u0026amp;copy; 2004 Foo Corporation \u0026lt;/div\u0026gt; Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it\u0026rsquo;s also easy to use Markdown to write about Markdown\u0026rsquo;s own syntax.\ntell application \u0026#34;Foo\u0026#34; beep end tell Span Elements # Links # Markdown supports two style of links: inline and reference.\nIn both styles, the link text is delimited by [square brackets].\nTo create an inline link, use a set of regular parentheses immediately after the link text\u0026rsquo;s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:\nThis is an example inline link.\nThis link has no title attribute.\nEmphasis # Markdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML \u0026lt;em\u0026gt; tag; double *\u0026rsquo;s or _\u0026rsquo;s will be wrapped with an HTML \u0026lt;strong\u0026gt; tag. E.g., this input:\nsingle asterisks\nsingle underscores\ndouble asterisks\ndouble underscores\nCode # To indicate a span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\nUse the printf() function.\n","date":"2022/10/25","permalink":"/posts/markdown_test/","section":"Posts","summary":"Original from mxstbr/markdown-test-file Markdown: Syntax # Overview Philosophy Inline HTML Automatic Escaping for Special Characters Block Elements Paragraphs and Line Breaks Headers Blockquotes Lists Code Blocks Horizontal Rules Span Elements Links Emphasis Code Images Miscellaneous Backslash Escapes Automatic Links Note: This document is itself written using Markdown; you can see the source for it by adding \u0026lsquo;.","title":"Markdown Test File"},{"content":"","date":"0001/01/01","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"0001/01/01","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"0001/01/01","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>graph on Luma's Shoka</title><link>https://luma0724.github.io/tags/graph/</link><description>Recent content in graph on Luma's Shoka</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 08 Jan 2023 15:20:25 +0800</lastBuildDate><atom:link href="https://luma0724.github.io/tags/graph/index.xml" rel="self" type="application/rss+xml"/><item><title>Graph Traversal</title><link>https://luma0724.github.io/posts/graph-traversal/</link><pubDate>Sun, 08 Jan 2023 15:20:25 +0800</pubDate><guid>https://luma0724.github.io/posts/graph-traversal/</guid><description>Depth-first Search> Depth-first Search # Depth-first search explores unvisited path and goes as far as possible, and backtracks to explore a new path. It repeats until there is no path unexplored.</description></item><item><title>Graph Implementation</title><link>https://luma0724.github.io/posts/graph-implementation/</link><pubDate>Sat, 07 Jan 2023 15:49:30 +0800</pubDate><guid>https://luma0724.github.io/posts/graph-implementation/</guid><description>Linked Adjacency List> Linked Adjacency List # A graph can be implemented as a linked adjacency list (more preferred than adjancency matrix or edge list due to memory constraints)
struct edge { int to, next, w; } e[E&amp;lt;&amp;lt;1]; // e[E] if directed graph int head[V], i; void add_edge(int u, int v, int w) { e[++i]={v, head[u], w}; head[u]=i; e[++i]={u, head[v], w}; // undirected graph head[v]=i; } // traversing the graph void dfs(int u, int p) { int i=head[u]; while (i) { // terminate when i=0 if (e[i].</description></item></channel></rss>